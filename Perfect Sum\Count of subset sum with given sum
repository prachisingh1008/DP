//{ Driver Code Starts
#include <bits/stdc++.h>
using namespace std;

// } Driver Code Ends
class Solution{
const int MOD = 1e9 + 7;
	public:
	int perfectSum(int arr[], int n, int sum)
	{
        // Your code goes here
        
         int t[n+1][sum+1];
       t[0][0] = 1;
    for (int i = 1; i <= sum; i++)
        t[0][i] = 0;
        for (int i = 1; i <= n; i++)
        t[i][0] = 1;
        for(int i=1;i<n+1;i++)
       {
           for(int j=0;j<sum+1;j++)
           {
               if(arr[i-1]<=j)
               t[i][j] = (t[i - 1][j - arr[i - 1]] + t[i - 1][j])%MOD;
               else if(arr[i-1]>j)
               t[i][j]=t[i-1][j];
               
           }
       }
       return t[n][sum];
	}
	
};
Given an array arr[] of non-negative integers and an integer sum, the task is to count all subsets of the given array with a sum equal to a given sum.

Note: Answer can be very large, so, output answer modulo 109+7

Example 1:

Input: N = 6, arr[] = {2, 3, 5, 6, 8, 10}
       sum = 10
Output: 3
Explanation: {2, 3, 5}, {2, 8}, {10} are 
possible subsets.
Example 2:
Input: N = 5, arr[] = {1, 2, 3, 4, 5}
       sum = 10
Output: 3
Explanation: {1, 2, 3, 4}, {1, 4, 5}, 
{2, 3, 5} are possible subsets.

