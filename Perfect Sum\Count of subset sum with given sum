//{ Driver Code Starts
#include <bits/stdc++.h>
using namespace std;

// } Driver Code Ends
class Solution{
const int MOD = 1e9 + 7;
	public:
	int perfectSum(int arr[], int n, int sum)
	{
        // Your code goes here
        
         int t[n+1][sum+1];
       t[0][0] = 1;
    for (int i = 1; i <= sum; i++)
        t[0][i] = 0;
        for (int i = 1; i <= n; i++)
        t[i][0] = 1;
        for(int i=1;i<n+1;i++)
       {
           for(int j=0;j<sum+1;j++)
           {
               if(arr[i-1]<=j)
               t[i][j] = (t[i - 1][j - arr[i - 1]] + t[i - 1][j])%MOD;
               else if(arr[i-1]>j)
               t[i][j]=t[i-1][j];
               
           }
       }
       return t[n][sum];
	}
	
};

Given an array of non-negative integers, and a value sum, determine if there is a subset of the given set with sum equal to given sum. 


Example 1:

Input:
N = 6
arr[] = {3, 34, 4, 12, 5, 2}
sum = 9
Output: 1 
Explanation: Here there exists a subset with
sum = 9, 4+3+2 = 9.
Example 2:

Input:
N = 6
arr[] = {3, 34, 4, 12, 5, 2}
sum = 30
Output: 0 
Explanation: There is no subset with sum 30.
