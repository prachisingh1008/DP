//{ Driver Code Starts
// Initial Template for C++

#include <bits/stdc++.h>
using namespace std;

// } Driver Code Ends
// User function Template for C++

class Solution{
public:
bool isSubsetSum(int arr[], int sum ,int n){
        // code here 
      //  int n=sizeof(arr);
        bool t[n+1][sum+1];
       for(int i=0;i<n+1;i++)
       {
           for(int j=0;j<sum+1;j++)
           {
               if(i==0)
               t[i][j]=false;
           }
       }
        for(int i=0;i<n+1;i++)
       {
           for(int j=0;j<sum+1;j++)
           {
               if(j==0)
               t[i][j]=true;
           }
       }
        for(int i=1;i<n+1;i++)
       {
           for(int j=1;j<sum+1;j++)
           {
               if(arr[i-1]<=j)
               t[i][j]=t[i-1][j-arr[i-1]]||t[i-1][j];
               else if(arr[i-1]>j)
               t[i][j]=t[i-1][j];
               
           }
       }
       return t[n][sum];
    }
    int equalPartition(int N, int arr[])
    {
        // code here
        int sum=0;
        for(int i=0;i<N;i++)
        {
            sum+=arr[i];
        }
        if(sum%2!=0)
        {
            return 0;
        }
        else
        return isSubsetSum(arr,sum/2,N);
    }
};

Given an array arr[] of size N, check if it can be partitioned into two parts such that the sum of elements in both parts is the same.

Example 1:

Input: N = 4
arr = {1, 5, 11, 5}
Output: YES
Explanation: 
The two parts are {1, 5, 5} and {11}.
